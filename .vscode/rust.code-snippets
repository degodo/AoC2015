{
	// Place your rust-training-Arbeitsbereich snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	//  	"scope": "javascript,typescript",
	//	 	"prefix": "log",
	//	 	"body": [
	//		 		"console.log('$1');",
	//		 		"$2"
	//		 	],
	//		"description": "Log output to console"
	//	}
			
	"extern crate declaration": {
		"scope": "rust",
		"prefix": "ec",
		"body": ["extern crate $1;"]
	},
	"extern crate as declaration": {
		"scope": "rust",
		"prefix": "eca",
		"body": ["extern crate $1 as $2;"]
	},
	"use declaration": {
		"scope": "rust",
		"prefix": "us",
		"body": ["use $1;"]
	},
	"use as declaration": {
		"scope": "rust",
		"prefix": "usa",
		"body": ["use $1 as $2;"]
	},
	"use bracketed declaration": {
		"scope": "rust",
		"prefix": "usb",
		"body": ["use $1::{$2};"]
	},
	"use all in": {
		"scope": "rust",
		"prefix": "us*",
		"body": ["use $1::*;"]
	},
	"module declaration": {
		"scope": "rust",
		"prefix": "mo",
		"body": ["mod $1;"]
	},
	"module bracketed declaration": {
		"scope": "rust",
		"prefix": "mob",
		"body": ["mod $1 {\n    $0\n}"]
	},
	"let statement": {
		"scope": "rust",
		"prefix": "le",
		"body": ["let $1 = $2;"]
	},
	"let mut statement": {
		"scope": "rust",
		"prefix": "lem",
		"body": ["let mut $1 = $2;"]
	},
	"let ref statement": {
		"scope": "rust",
		"prefix": "ler",
		"body": ["let ref $1 = $2;"]
	},
	"let ref mut statement": {
		"scope": "rust",
		"prefix": "lerm",
		"body": ["let ref mut $1 = $2;"]
	},
	"if expression": {
		"scope": "rust",
		"prefix": "if",
		"body": ["if $1 {", "    $2", "}"]
	},
	"if else expression": {
		"scope": "rust",
		"prefix": "ife",
		"body": ["if $1 {", "    $2", "} else {", "    $3", "}"]
	},
	"if let expression": {
		"scope": "rust",
		"prefix": "ifl",
		"body": ["if let $1 = $2 {", "    $3", "}"]
	},
	"else clause": {
		"scope": "rust",
		"prefix": "el",
		"body": ["else {", "    $1", "}"]
	},
	"match expression": {
		"scope": "rust",
		"prefix": "ma",
		"body": ["match $1 {", "    $2 => $3,", "    $4 => $5,$6", "}"]
	},
	"for loop": {
		"scope": "rust",
		"prefix": "fo",
		"body": ["for $1 in $2 {", "    $3", "}"]
	},
	"type definition": {
		"scope": "rust",
		"prefix": "ty",
		"body": ["type $1 = $2;"]
	},
	"generic type definition": {
		"scope": "rust",
		"prefix": "tyg",
		"body": ["type $1<${2:T}> = $3<$2>$4;"]
	},
	"struct definition": {
		"scope": "rust",
		"prefix": "st",
		"body": ["$1struct $2 {", "    $3", "}"]
	},
	"generic struct definition": {
		"scope": "rust",
		"prefix": "stg",
		"body": ["$1struct $2<${3:T}> $4{", "    $5", "}"]
	},
	"struct definition with impl": {
		"scope": "rust",
		"prefix": "sti",
		"body": ["$1struct $2 {", "    $3", "}\n", "impl $2 {", "    $4", "}"]
	},
	"generic struct definition with impl": {
		"scope": "rust",
		"prefix": "stig",
		"body": [
			"$1struct $2<${3:T}> $4{",
			"    $5",
			"}\n",
			"impl<$3> $2<$3> $6{",
			"    $7",
			"}"
		]
	},
	"enum definition": {
		"scope": "rust",
		"prefix": "en",
		"body": ["$1enum $2 {", "    $3", "}"]
	},
	"generic enum definition": {
		"scope": "rust",
		"prefix": "eng",
		"body": ["$1enum $2<${3:T}> $4{", "    $5", "}"]
	},
	"enum definition with impl": {
		"scope": "rust",
		"prefix": "eni",
		"body": ["$1enum $2 {", "    $3", "}\n", "impl $2 {", "    $4", "}"]
	},
	"generic enum definition with impl": {
		"scope": "rust",
		"prefix": "enig",
		"body": [
			"$1enum $2<${3:T}> $4{",
			"    $5",
			"}\n",
			"impl<$3> $2<$3> $6{",
			"    $7",
			"}"
		]
	},
	"trait definition": {
		"scope": "rust",
		"prefix": "tr",
		"body": ["$1trait $2 {", "    $3", "}"]
	},
	"generic trait definition": {
		"scope": "rust",
		"prefix": "trg",
		"body": ["$1trait $2<${3:T}> $4{", "    $5", "}"]
	},
	"impl type": {
		"scope": "rust",
		"prefix": "im",
		"body": ["impl $1 {", "    $2", "}"]
	},
	"impl trait for type": {
		"scope": "rust",
		"prefix": "imf",
		"body": ["impl $1 for $2 {", "    $3", "}"]
	},
	"impl generic": {
		"scope": "rust",
		"prefix": "img",
		"body": ["impl<${1:T}> $2 {", "    $3", "}"]
	},
	"function definition": {
		"scope": "rust",
		"prefix": "fn",
		"body": ["$1fn ${2:f}($3) $4{", "    $5", "}"]
	},
	"multiline lambda": {
		"scope": "rust",
		"prefix": "|",
		"body": ["${1:move }|$2| {", "    $3", "}"]
	},
	"new constructor definition": {
		"scope": "rust",
		"prefix": "new",
		"body": ["$1fn new($2) -> $3Self {", "    $4", "}"]
	},
	"main function definition": {
		"scope": "rust",
		"prefix": "main",
		"body": ["fn main() {", "    $1", "}"]
	},
	"Option<T>": {
		"scope": "rust",
		"prefix": "opt",
		"body": ["Option<$1>"]
	},
	"Result<T>": {
		"scope": "rust",
		"prefix": "res",
		"body": ["$1Result<$2>"]
	},
	"impl From<...> for ...": {
		"prefix": "from",
		"body": [
			"impl From<$1> for $2 {",
			"    fn from(${3:val}: $1) -> Self {",
			"        $4",
			"    }\n}"
		]
	},
	"println debug": {
		"scope": "rust",
		"prefix": "pdb",
		"body": ["println!(\"$1 = {:?}\", $1);"]
	},
	"println": {
		"scope": "rust",
		"prefix": "pln",
		"body": ["println!($1);"]
	},
	"assert statement": {
		"scope": "rust",
		"prefix": "ass",
		"body": ["assert!($1);"]
	},
	"assert_eq statement": {
		"scope": "rust",
		"prefix": "asse",
		"body": ["assert_eq!($1, $2);"]
	},
	"vec macro call": {
		"scope": "rust",
		"prefix": "vec",
		"body": ["vec![$1]"]
	},
	"unimplemented macro call with TODO comment": {
		"scope": "rust",
		"prefix": "un",
		"body": ["unimplemented!() // TODO"]
	},
	"unreachable macro call": {
		"scope": "rust",
		"prefix": "unr",
		"body": ["unreachable!($1)"]
	},
	"macro rules": {
		"scope": "rust",
		"prefix": "mr",
		"body": ["macro_rules! $1 {", "    ($2) => {", "        $3", "    };\n}"]
	},
	"test function": {
		"scope": "rust",
		"prefix": "test",
		"body": ["#[test]", "fn test_$1() {", "    $2", "}"]
	},
	"test module": {
		"scope": "rust",
		"prefix": "testm",
		"body": [
			"#[cfg(test)]",
			"mod test_${1:super} {",
			"    ${2:use super::*;}\n",
			"    #[test]",
			"    fn test_$3() {",
			"        $4",
			"    }\n}"
		]
	},
	"attribute": {
		"scope": "rust",
		"prefix": "#",
		"body": ["#[${1:name}($2)]"]
	},
	"cfg attribute": {
		"scope": "rust",
		"prefix": "cfg",
		"body": ["#[cfg($1)]"]
	},
	"cfg feature attribute": {
		"scope": "rust",
		"prefix": "cff",
		"body": ["#[cfg(feature = \"$1\")]"]
	},
	"derive attribute": {
		"scope": "rust",
		"prefix": "drv",
		"body": ["#[derive($1)]"]
	},
	"derive a few useful attributes": {
		"scope": "rust",
		"prefix": "drv*",
		"body": ["#[derive(Copy, Clone, Debug, Default, PartialEq, Eq$1)]"]
	},
	"TODO comment": {
		"scope": "rust",
		"prefix": "todo",
		"body": ["// TODO: ${1:...}"]
	}
}
		